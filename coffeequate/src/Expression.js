// Generated by CoffeeScript 1.6.3
(function() {
  define(["parse", "nodes"], function(parse, nodes) {
    var Expression;
    Expression = (function() {
      function Expression(val) {
        if (val instanceof String || typeof val === "string") {
          this.expr = parse.stringToExpression(val);
        } else if (val.copy != null) {
          this.expr = val.copy();
        } else {
          console.log("Received argument: ", val);
          throw new Error("Unknown argument: `" + val + "'.");
        }
      }

      Expression.prototype.toString = function() {
        return this.expr.toString();
      };

      Expression.prototype.toMathML = function() {
        return this.expr.toMathML();
      };

      Expression.prototype.toLaTeX = function() {
        return this.expr.toLaTeX();
      };

      Expression.prototype.solve = function(variable) {
        var solution, _i, _len, _ref, _results;
        _ref = this.expr.solve(variable);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          solution = _ref[_i];
          _results.push(new Expression(solution));
        }
        return _results;
      };

      Expression.prototype.sub = function(substitutions) {
        var key, newsubs;
        newsubs = {};
        for (key in substitutions) {
          if (substitutions[key] instanceof Expression) {
            newsubs[key] = substitutions[key].expr;
          } else {
            newsubs[key] = substitutions[key];
          }
        }
        return new Expression(this.expr.sub(newsubs, null, null).simplify());
      };

      Expression.prototype.copy = function() {
        return new Expression(this.expr.copy());
      };

      Expression.prototype.simplify = function() {
        return new Expression(this.expr.simplify());
      };

      Expression.prototype.expand = function() {
        return new Expression(this.expr.expand());
      };

      return Expression;

    })();
    return Expression;
  });

}).call(this);
