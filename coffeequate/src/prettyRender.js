// Generated by CoffeeScript 1.6.3
(function() {
  var greekLatexDictionary,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  greekLatexDictionary = {
    "α": "\\alpha ",
    "A": "A",
    "β": "\\beta ",
    "B": "B",
    "χ": "\\chi ",
    "Δ": "\\Delta ",
    "δ": "\\delta ",
    "ε": "\\varepsilon ",
    "ϵ": "\\epsilon ",
    "E": "E",
    "Η": "\\Eta ",
    "γ": "\\gamma ",
    "Γ": "\\Gamma ",
    "ι": "\\iota ",
    "Ι": "I",
    "κ": "\\kappa ",
    "ϰ": "\\varkappa ",
    "Κ": "K",
    "λ": "\\lambda ",
    "Λ": "\\Lambda ",
    "μ": "\\mu ",
    "Μ": "M",
    "ν": "\\nu ",
    "Ν": "N",
    "ω": "\\omega ",
    "Ω": "\\Omega ",
    "ℴ": "o",
    "O": "O",
    "ϕ": "\\phi ",
    "φ": "\\varphi ",
    "Φ": "\\Phi ",
    "π": "\\pi ",
    "Π": "\\Pi ",
    "ψ": "\\psi ",
    "Ψ": "\\Psi ",
    "ρ": "\\rho ",
    "Ρ": "P",
    "σ": "\\sigma ",
    "ς": "\\varsigma ",
    "Σ": "\\Sigma ",
    "τ": "\\tau ",
    "Τ": "T",
    "θ": "\\theta ",
    "Θ": "\\Theta ",
    "υ": "\\upsilon ",
    "ξ": "\\xi ",
    "Ξ": "\\Xi ",
    "ζ": "\\zeta ",
    "Ζ": "Z",
    "ϖ": "\\varpi ",
    "ϱ": "\\varrho ",
    "ϑ": "\\vartheta "
  };

  define(function() {
    var Add, Bracket, DrawingNode, Fraction, Mul, Number, Pow, Surd, Uncertainty, Variable;
    DrawingNode = (function() {
      function DrawingNode() {}

      DrawingNode.prototype.toString = function() {
        throw new Error("not implemented");
      };

      DrawingNode.prototype.renderLaTeX = function() {
        throw new Error("not implemented");
      };

      DrawingNode.prototype.bindingStrength = function() {
        return 8;
      };

      DrawingNode.prototype.bracketIfNeeded = function(child) {
        if (child.bindingStrength() <= this.bindingStrength()) {
          return new Bracket(child);
        }
        return child;
      };

      return DrawingNode;

    })();
    DrawingNode.makeWithBrackets = function() {
      var node, terms;
      terms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      node = new this();
      terms = terms.map(function(x) {
        if (x.bindingStrength() <= node.bindingStrength()) {
          return new Bracket(x);
        } else {
          return x;
        }
      });
      node.terms = terms;
      return node;
    };
    Add = (function(_super) {
      __extends(Add, _super);

      function Add() {
        var terms;
        terms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.terms = terms;
      }

      Add.prototype.bindingStrength = function() {
        return 4;
      };

      Add.prototype.renderLaTeX = function() {
        return this.terms.map(function(x) {
          return x.renderLaTeX();
        }).join(" + ");
      };

      Add.prototype.renderString = function() {
        return this.terms.map(function(x) {
          return x.renderString();
        }).join(" + ");
      };

      Add.prototype.renderMathML = function() {
        return this.terms.map(function(x) {
          return x.renderMathML();
        }).join("<mo>+</mo>");
      };

      return Add;

    })(DrawingNode);
    Mul = (function(_super) {
      __extends(Mul, _super);

      function Mul() {
        var terms;
        terms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.terms = terms;
      }

      Mul.prototype.bindingStrength = function() {
        return 6;
      };

      Mul.prototype.renderLaTeX = function() {
        return this.terms.map(function(x) {
          return x.renderLaTeX();
        }).join(" \\cdot ");
      };

      Mul.prototype.renderString = function() {
        return this.terms.map(function(x) {
          return x.renderString();
        }).join("*");
      };

      Mul.prototype.renderMathML = function() {
        return this.terms.map(function(x) {
          return x.renderMathML();
        }).join("<mo>&middot;</mo>");
      };

      return Mul;

    })(DrawingNode);
    Pow = (function(_super) {
      __extends(Pow, _super);

      function Pow(left, right) {
        this.left = left;
        this.right = right;
      }

      Pow.prototype.renderLaTeX = function() {
        return "" + (this.left.renderLaTeX()) + "^{" + (this.right.renderLaTeX()) + "}";
      };

      Pow.prototype.renderString = function() {
        return "" + (this.left.renderString()) + "**" + (this.bracketIfNeeded(this.right).renderString());
      };

      Pow.prototype.renderMathML = function() {
        return "<msup>" + (this.left.renderMathML()) + (this.right.renderMathML()) + "</msup>";
      };

      return Pow;

    })(DrawingNode);
    Bracket = (function(_super) {
      __extends(Bracket, _super);

      function Bracket(contents) {
        this.contents = contents;
      }

      Bracket.prototype.bindingStrength = function() {
        return 9;
      };

      Bracket.prototype.renderLaTeX = function() {
        return "\\left(" + (this.contents.renderLaTeX()) + "\\right)";
      };

      Bracket.prototype.renderString = function() {
        return "(" + (this.contents.renderString()) + ")";
      };

      Bracket.prototype.renderMathML = function() {
        return "<mfenced><mrow>" + (this.contents.renderMathML()) + "</mrow></mfenced>";
      };

      return Bracket;

    })(DrawingNode);
    Number = (function(_super) {
      __extends(Number, _super);

      function Number(value, classname) {
        this.value = value;
        this.classname = classname != null ? classname : "constant";
      }

      Number.prototype.bindingStrength = function() {
        return 10;
      };

      Number.prototype.renderLaTeX = function() {
        return this.value + "";
      };

      Number.prototype.renderString = function() {
        return this.value + "";
      };

      Number.prototype.renderMathML = function() {
        return "<mn class=\"" + this.classname + "\">" + this.value + "</mn>";
      };

      return Number;

    })(DrawingNode);
    Variable = (function(_super) {
      __extends(Variable, _super);

      function Variable(label, classname) {
        this.label = label;
        this.classname = classname != null ? classname : "variable";
      }

      Variable.prototype.bindingStrength = function() {
        return 10;
      };

      Variable.prototype.renderLaTeX = function() {
        var char, mlabel, _i, _len, _ref;
        mlabel = "";
        _ref = this.label;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          char = _ref[_i];
          if (char in greekLatexDictionary) {
            mlabel += greekLatexDictionary[char];
          } else {
            mlabel += char;
          }
        }
        return mlabel;
      };

      Variable.prototype.renderString = function() {
        return this.label;
      };

      Variable.prototype.renderMathML = function() {
        var atCount, atEnd, atStart, i, label, labelArray;
        labelArray = this.label.split("-");
        label = labelArray[0];
        atCount = 0;
        while (label[0] === "@") {
          atCount += 1;
          label = label.slice(1);
        }
        atStart = "<mover accent=\"true\">";
        atEnd = "<mrow><mo>" + ((function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= atCount ? _i < atCount : _i > atCount; i = 0 <= atCount ? ++_i : --_i) {
            _results.push(".");
          }
          return _results;
        })()).join("") + "</mo></mrow></mover>";
        if (label.length > 1) {
          return atStart + '<msub class="' + this.classname + '"><mi>' + label[0] + '</mi><mi>' + label.slice(1) + "</mi></msub>" + atEnd;
        } else {
          return '<mi class="' + this.classname + '">' + label + '</mi>';
        }
      };

      return Variable;

    })(DrawingNode);
    Fraction = (function(_super) {
      __extends(Fraction, _super);

      function Fraction(top, bottom) {
        this.top = top;
        this.bottom = bottom;
      }

      Fraction.prototype.bindingStrength = function() {
        return 8;
      };

      Fraction.prototype.renderLaTeX = function() {
        return "\\frac{" + (this.top.renderLaTeX()) + "}{" + (this.bottom.renderLaTeX()) + "}";
      };

      Fraction.prototype.renderString = function() {
        return "" + (this.bracketIfNeeded(this.top).renderString()) + "/" + (this.bracketIfNeeded(this.bottom).renderString());
      };

      Fraction.prototype.renderMathML = function(x, y) {
        return "<mfrac>      <mrow>" + (this.top.renderMathML(x, y)) + "</mrow>      <mrow>" + (this.bottom.renderMathML(x, y)) + "</mrow>      </mfrac>";
      };

      return Fraction;

    })(DrawingNode);
    Surd = (function(_super) {
      __extends(Surd, _super);

      function Surd(contents, power) {
        this.contents = contents;
        this.power = power != null ? power : null;
      }

      Surd.prototype.renderLaTeX = function() {
        if (this.power && this.power !== 2) {
          return "\\sqrt[" + this.power + "]{" + (this.contents.renderLaTeX()) + "}";
        } else {
          return "\\sqrt{" + (this.contents.renderLaTeX()) + "}";
        }
      };

      Surd.prototype.renderString = function() {
        if (this.power && this.power !== 2) {
          return "" + (this.bracketIfNeeded(this.contents).renderString()) + " ** (1/" + this.power + ")";
        } else {
          return "sqrt(" + (this.contents.renderString()) + ")";
        }
      };

      Surd.prototype.renderMathML = function() {
        var x, _ref, _ref1, _ref2;
        x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (this.power && this.power !== 2) {
          return "<mroot>                  <mrow>                    " + ((_ref = this.power).renderMathML.apply(_ref, x)) + "                  </mrow>                  <mrow>                    " + ((_ref1 = this.contents).renderMathML.apply(_ref1, x)) + "                  </mrow>                </mroot>";
        } else {
          return "<msqrt>                  " + ((_ref2 = this.contents).renderMathML.apply(_ref2, x)) + "                </msqrt>";
        }
      };

      return Surd;

    })(DrawingNode);
    Uncertainty = (function(_super) {
      __extends(Uncertainty, _super);

      function Uncertainty(label, _class) {
        this.label = label;
        this["class"] = _class != null ? _class : "default";
      }

      Uncertainty.prototype.bindingStrength = function() {
        return 9;
      };

      Uncertainty.prototype.renderLaTeX = function() {
        return "\\sigma_{" + this.label + "}";
      };

      Uncertainty.prototype.renderString = function() {
        return "σ(" + this.label + ")";
      };

      Uncertainty.prototype.renderMathML = function() {
        var dummy, x;
        x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        dummy = new Variable(this.label);
        return "<msub><mo>&sigma;</mo>" + (dummy.renderMathML.apply(dummy, x)) + "</msub>";
      };

      return Uncertainty;

    })(DrawingNode);
    return {
      DrawingNode: DrawingNode,
      Add: Add,
      Mul: Mul,
      Pow: Pow,
      Bracket: Bracket,
      Number: Number,
      Variable: Variable,
      Fraction: Fraction,
      Surd: Surd,
      Uncertainty: Uncertainty
    };
  });

}).call(this);
