{
// These dummy definitions make it easier to test

stringToTerminal = function(x) { return x; };
operators = {
  Add: function(l,r) { return ["+",l,r] },
  Mul: function(l,r) { return ["*",l,r] },
  Sub: function(l,r) { return ["-",l,r] },
  Pow: function(l,r) { return ["**",l,r] }
};
}

start
  = expr

expr
  = left:term "+" right:expr { return new operators.Add(left, right); }
  / left:term "-" right:expr { return new operators.Add(left, new operators.Mul(right, "-1")); }
  / x:term { return x; }

term
  = l:powerTerm "*" r:term { return new operators.Mul(l, r); }
  / l:powerTerm "/" r:term { return new operators.Mul(l, new operators.Pow(r, "-1")); }
  / f:powerTerm { return f; }

powerTerm
  = l:factor "**" r:factor { return new operators.Pow(l, r); }
  / f:factor { return f; }


factor
  = terminal:[^()+\-*/{}:]+ "::{" u:[^{}]+ "}" { return stringToTerminal(terminal.join("") + "::{" + u.join("") + "}"); }
  / terminal:[^()+\-*/{}:]+ { return stringToTerminal(terminal.join("")); }
  / "(" x:expr ")" { return x; }
  / "-" x:factor { return new operators.Mul(x, "-1") }