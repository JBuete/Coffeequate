// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function() {
    var BasicNode, BinaryNode, RoseNode;
    BasicNode = (function() {
      function BasicNode(label) {
        this.label = label;
      }

      BasicNode.prototype.getChildren = function() {
        return [];
      };

      BasicNode.prototype.getAllVariables = function() {
        return [];
      };

      BasicNode.prototype.toDrawingNode = function() {
        throw new Error("toDrawingNode not implemented for " + (self.toString()));
      };

      BasicNode.prototype.toLaTeX = function() {
        return this.toDrawingNode().renderLaTeX();
      };

      BasicNode.prototype.toString = function() {
        return this.toDrawingNode().renderString();
      };

      BasicNode.prototype.toMathML = function() {
        return this.toDrawingNode().renderMathML();
      };

      BasicNode.prototype.stringEqual = function(other) {
        return other.toString() === this.toString();
      };

      return BasicNode;

    })();
    RoseNode = (function(_super) {
      __extends(RoseNode, _super);

      function RoseNode(label, children) {
        this.children = children != null ? children : null;
        if (this.children == null) {
          this.children = [];
        }
        RoseNode.__super__.constructor.call(this, label);
      }

      RoseNode.prototype.getChildren = function() {
        return this.children;
      };

      return RoseNode;

    })(BasicNode);
    BinaryNode = (function(_super) {
      __extends(BinaryNode, _super);

      function BinaryNode(label, left, right) {
        this.label = label;
        this.children = {
          left: left,
          right: right
        };
      }

      BinaryNode.prototype.getChildren = function() {
        return [this.children.left, this.children.right];
      };

      return BinaryNode;

    })(BasicNode);
    return {
      BasicNode: BasicNode,
      RoseNode: RoseNode,
      BinaryNode: BinaryNode
    };
  });

}).call(this);
